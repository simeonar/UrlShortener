
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated for the UrlShortener project.
//     File: AdminController.cs
//     Description: Controller for admin operations on shortened URLs.
// </auto-generated>
// ------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using UrlShortener.Core.Repositories;
using UrlShortener.Core.Entities;

namespace UrlShortener.API.Controllers
{
    [ApiController]
    [Route("api/admin")]
    public class AdminController : ControllerBase
    {
        private readonly IShortenedUrlRepository _urlRepository;
        private readonly IUserRepository _userRepository;
        private const string AdminApiKey = "admin-secret-key"; // TODO: move to config

        public AdminController(IShortenedUrlRepository urlRepository, IUserRepository userRepository)
        {
            this._urlRepository = urlRepository;
            this._userRepository = userRepository;
        }

        private bool IsAdmin(HttpRequest request)
        {
            if (request.Headers.TryGetValue("X-Api-Key", out var apiKey))
            {
                return apiKey == AdminApiKey;
            }
            return false;
        }

        [HttpGet("stats")]
        public async Task<IActionResult> GetStats()
        {
            if (!this.IsAdmin(this.Request))
            {
                return this.Unauthorized("Admin API key required");
            }

            var links = await this._urlRepository.GetAllAsync();
            var users = this._userRepository.GetAll();
            var totalLinks = links.Count;
            var totalUsers = users.Count();
            var totalClicks = links.Sum(l => l.ClicksCount);
            // var topLinks = links
            //     .OrderByDescending(l => l.ClicksCount)
            //     .Take(10)
            //     .Select(l => new TopLinkDto
            //     {
            //         ShortCode = l.ShortCode,
            //         OriginalUrl = l.OriginalUrl,
            //         ClicksCount = l.ClicksCount
            //     })
            //     .ToList();
            // var stats = new AdminStatsDto
            // {
            //     TotalLinks = totalLinks,
            //     TotalUsers = totalUsers,
            //     TotalClicks = totalClicks,
            //     TopLinks = topLinks
            // };
            // return Ok(stats);
            return this.Ok(new { totalLinks, totalUsers, totalClicks });
        }

        [HttpGet("users")]
        public IActionResult GetAllUsers()
        {
            if (!this.IsAdmin(this.Request))
            {
                return this.Unauthorized("Admin API key required");
            }

            var users = this._userRepository.GetAll();
            return this.Ok(users);
        }

        [HttpGet("links")]
        public async Task<IActionResult> GetAllLinks()
        {
            if (!this.IsAdmin(this.Request))
            {
                return this.Unauthorized("Admin API key required");
            }

            var links = await this._urlRepository.GetAllAsync();
            return this.Ok(links);
        }

        [HttpDelete("links/{shortCode}")]
        public async Task<IActionResult> DeleteLink(string shortCode)
        {
            if (!this.IsAdmin(this.Request))
            {
                return this.Unauthorized("Admin API key required");
            }

            await this._urlRepository.DeleteByShortCodeAsync(shortCode);
            return this.NoContent();
        }

        [HttpPost("links/{shortCode}/block")]
        public async Task<IActionResult> BlockLink(string shortCode)
        {
            if (!this.IsAdmin(this.Request))
            {
                return this.Unauthorized("Admin API key required");
            }

            var link = await this._urlRepository.GetByShortCodeAsync(shortCode);
            if (link == null)
            {
                return this.NotFound();
            }

            if (link.IsBlocked)
            {
                return this.BadRequest("Link is already blocked.");
            }

            link.IsBlocked = true;
            await this._urlRepository.UpdateAsync(link);
            return this.Ok();
        }

        [HttpPost("links/{shortCode}/unblock")]
        public async Task<IActionResult> UnblockLink(string shortCode)
        {
            if (!this.IsAdmin(this.Request))
            {
                return this.Unauthorized("Admin API key required");
            }

            var link = await this._urlRepository.GetByShortCodeAsync(shortCode);
            if (link == null)
            {
                return this.NotFound();
            }

            if (!link.IsBlocked)
            {
                return this.BadRequest("Link is not blocked.");
            }

            link.IsBlocked = false;
            await this._urlRepository.UpdateAsync(link);
            return this.Ok();
        }

        [HttpGet("links/blocked")]
        public async Task<IActionResult> GetBlockedLinks()
        {
            if (!this.IsAdmin(this.Request))
            {
                return this.Unauthorized("Admin API key required");
            }

            var links = await this._urlRepository.GetAllAsync();
            var blocked = links.Where(l => l.IsBlocked).ToList();
            return this.Ok(blocked);
        }
    }
}
